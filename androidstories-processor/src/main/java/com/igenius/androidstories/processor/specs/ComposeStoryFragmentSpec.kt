package com.igenius.androidstories.processor.specs

import com.igenius.androidstories.processor.ASYNC_STORY_FRAGMENT
import com.igenius.androidstories.processor.STORY_FRAGMENT
import com.igenius.androidstories.processor.models.AnnotatedStory
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import java.io.File
import javax.annotation.processing.ProcessingEnvironment
import javax.lang.model.element.Element


class ComposeStoryFragmentSpec(
    composeStoryElement: Element,
    processingEnv: ProcessingEnvironment
) {
    private val name = "${composeStoryElement.simpleName.toString().replaceFirstChar { it.uppercase() }}StoryFragment"

    val annotatedStory = AnnotatedStory(processingEnv, composeStoryElement, name)

    private val superType = annotatedStory.dataType?.let {
        ASYNC_STORY_FRAGMENT.parameterizedBy(it)
    } ?: STORY_FRAGMENT

    private val variantStateFlowSpec = PropertySpec
        .builder("variantFlow", MUTABLE_STATE_FLOW.parameterizedBy(
            (annotatedStory.dataType ?: String::class.asTypeName()).copy(nullable = true)
        ))
        .addModifiers(KModifier.PRIVATE)
        .initializer("${MUTABLE_STATE_FLOW.simpleName}(null)")

    private val properties: List<PropertySpec> = listOfNotNull(
        annotatedStory.dataType?.let {
            PropertySpec.builder("preventUiLoader", Boolean::class.asClassName(), KModifier.OVERRIDE)
                .initializer("%L.preventUiLoader", composeStoryElement.simpleName)
                .build()
        },
        variantStateFlowSpec.build()
    )

    private val variantFunSpec = annotatedStory.dataType?.let { dataType ->
        FunSpec.builder("onVariantLoaded")
            .addModifiers(KModifier.OVERRIDE)
            .addParameter(ParameterSpec("variant", String::class.asClassName()))
            .addParameter(ParameterSpec("data",dataType.copy(nullable = true)))
            .addStatement(
                "variantFlow.value = data",
                composeStoryElement.simpleName
            )
    } ?: FunSpec.builder("onVariantSelected")
            .addModifiers(KModifier.OVERRIDE)
            .addParameter(ParameterSpec("variant", String::class.asClassName()))
            .addStatement(
                "variantFlow.value = variant",
                composeStoryElement.simpleName
            )

    private val typeSpec = TypeSpec
        .classBuilder(name)
        .superclass(superType)
        .addProperties(properties)
        .addFunction(
            FunSpec.builder("onCreateView")
                .addModifiers(KModifier.OVERRIDE)
                .addParameter(INFLATER_PARAM)
                .addParameter(CONTAINER_PARAM)
                .addParameter(SAVED_INSTANCE_STATE_PARAM)
                .returns(VIEW_TYPE)
                .addStatement(
                    """
                        return ${COMPOSE_VIEW_TYPE.canonicalName}(requireContext()).apply { setContent {
                            val variant by variantFlow.$COLLECT_STATE_AS_LIFECYCLE_NAME()
                            ${
                                annotatedStory.dataType
                                    ?.let { "%L.content(variant)" }
                                    ?: "variant?.let { %L.content(it) }"
                            }
                        } }
                    """.trimIndent(),
                    composeStoryElement.simpleName
                ).build()
        )
        .addFunction(variantFunSpec.build())
        .build()

    private val fileSpec = FileSpec.builder(annotatedStory.packageName, name)
        .addComment("Autogenerated StoryFragment to expose ${annotatedStory.packageName}.${composeStoryElement.simpleName}")
        .addImport("androidx.lifecycle.compose", COLLECT_STATE_AS_LIFECYCLE_NAME)
        .addImport("androidx.compose.runtime", "getValue")
        .addType(typeSpec)

    fun writeTo(file: File) = fileSpec.build().writeTo(file)

    companion object {
        private val INFLATER_PARAM = ParameterSpec("inflater", ClassName("android.view", "LayoutInflater"))
        private val CONTAINER_PARAM = ParameterSpec("container", ClassName("android.view", "ViewGroup").copy(nullable = true))
        private val SAVED_INSTANCE_STATE_PARAM = ParameterSpec("savedInstanceState", ClassName("android.os", "Bundle").copy(nullable = true))
        private val VIEW_TYPE = ClassName("android.view", "View")
        private val COMPOSE_VIEW_TYPE = ClassName("androidx.compose.ui.platform", "ComposeView")
        private val MUTABLE_STATE_FLOW = ClassName("kotlinx.coroutines.flow", "MutableStateFlow")
        private const val COLLECT_STATE_AS_LIFECYCLE_NAME = "collectAsStateWithLifecycle"
    }
}