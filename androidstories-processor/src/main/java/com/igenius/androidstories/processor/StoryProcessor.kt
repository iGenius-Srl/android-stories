package com.igenius.androidstories.processor

import com.google.auto.service.AutoService
import com.igenius.androidstories.annotations.Story
import com.squareup.kotlinpoet.*
import java.io.File
import javax.annotation.processing.*
import javax.lang.model.SourceVersion
import javax.lang.model.element.Element
import javax.lang.model.element.ElementKind
import javax.lang.model.element.TypeElement

@SupportedAnnotationTypes("com.igenius.androidstories.annotations.Story")
@SupportedOptions(StoryProcessor.KAPT_KOTLIN_GENERATED_OPTION_NAME)
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@AutoService(Processor::class)
class StoryProcessor : AbstractProcessor() {

    override fun process(set: Set<TypeElement?>?, roundEnvironment: RoundEnvironment?): Boolean {

        val generatedSourcesRoot: String =
            processingEnv.options[KAPT_KOTLIN_GENERATED_OPTION_NAME].orEmpty()
        val elements = roundEnvironment?.getElementsAnnotatedWith(Story::class.java)

        elements?.filterNotNull()?.forEach { element ->

            if (element.kind == ElementKind.METHOD) {
                createFragment(element)
                    ?.writeTo(File(generatedSourcesRoot))
            }
        }
        return false
    }

    private fun createFragment(element: Element): FileSpec? {
        val packageName =
            processingEnv.elementUtils.getPackageOf(element).qualifiedName.toString()

        val fragmentClassName =
            "${element.simpleName.toString().replaceFirstChar { it.uppercase() }}StoryFragment"


        return FileSpec.builder(packageName, fragmentClassName)
            .addComment("Autogenerated Fragment to expose $packageName.${element.simpleName}")
            .addType(
                TypeSpec
                    .classBuilder(fragmentClassName)
                    .superclass(ClassName("androidx.fragment.app", "Fragment"))
                    .addFunction(
                        FunSpec.builder("onCreateView")
                            .addModifiers(KModifier.OVERRIDE)
                            .addParameter(
                                ParameterSpec(
                                    "inflater",
                                    ClassName("android.view", "LayoutInflater")
                                )
                            )
                            .addParameter(
                                ParameterSpec(
                                    "container",
                                    ClassName("android.view", "ViewGroup")
                                        .copy(nullable = true)
                                )
                            )
                            .addParameter(
                                ParameterSpec(
                                    "savedInstanceState",
                                    ClassName("android.os", "Bundle")
                                        .copy(nullable = true)
                                )
                            )
                            .returns(ClassName("android.view", "View"))
                            .addStatement("return $packageName.${element.simpleName}(inflater, container)")
                            .build()
                    )
                    .build()
            )
            .build()
    }

    fun addToProvider(className: ClassName) {
    }



    companion object {
        const val KAPT_KOTLIN_GENERATED_OPTION_NAME = "kapt.kotlin.generated"
    }
}